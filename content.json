[{"title":"Django2实现文件下载（包含中文名的文件）","date":"2019-08-15T16:56:45.000Z","path":"2019/08/16/Django2实现文件下载（包含中文名的文件）/","text":"前端html： &lt;a href=&quot;/download/&quot;&gt;下载&lt;/a&gt;url.py: urlpatterns = [ path(&apos;download/&apos;, download) ]views.py: from django.http import FileResponse def download(request): file = open(&apos;./static/download/简历.docx&apos;, &apos;rb&apos;) response = FileResponse(file) response[&apos;Content-Type&apos;] = &apos;application/vnd.openxmlformats-officedocument.wordprocessingml.document&apos; response[&apos;Content-Disposition&apos;] = &apos;attachment;filename= &apos;+&apos;简历&apos;.encode(&apos;utf-8&apos;).decode(&apos;ISO-8859-1&apos;)+&apos;.docx&apos; return response来解释一下download函数： 1、首先是打开存放文件的目录，‘.’表示根目录，也就是你整个django项目的根目录。我的“简历.docx”文件就放在djangoProjectName/static/download/目录下。 2、docx使用的MIME类型是 application/vnd.openxmlformats-officedocument.wordprocessingml.document。 3、因为文件名中有中文，如果直接在Content-Disposition中包含中文会导致文件名无法正常显示，因此要以 ‘简历’.encode(‘utf-8’).decode(‘ISO-8859-1’) 的形式进行转码。 网上搜到常用的有三种方法实现文件下载，我这边就试了这一种，其他你可以自己去搜一下然后试试。","tags":[]},{"title":"Django2中namespace和name的使用","date":"2019-07-27T10:24:34.000Z","path":"2019/07/27/Django2中namespace和name的使用/","text":"一、在Django &lt;= 1.11 我们通过关键词namespace参数定义名称空间1、projects/urls.py from django.conf.urls import url,include urlpatterns = [ url(r&apos;blog/&apos;, include(&apos;blog.urls&apos;, namespace=&apos;blog&apos;)) ]2、apps/urls.py from django.conf.urls import url from . import views urlpatterns = [ url(r&apos;^login/$&apos;, views.login, name=&quot;login&quot;), ]二、在Django 2.0+ 我们可以省略namespace，把namespace定义到被include的urls.py中去，使用app_name定义名称空间。1、projects/urls.py urlpatterns = [ path(r&apos;^blog/&apos;, include(&apos;blog.urls&apos;)) ]2、apps/urls.py from django.urls import path from . import views app_name = &apos;blog&apos; urlpatterns = [ path(&apos;login/&apos;, views.login, name=&quot;login&quot;), ]三、在templates中我们还是像原来一样的使用方法{% url 'blog:login' %}","tags":[]},{"title":"Django中如何将多个app放到同个文件夹apps","date":"2019-06-09T16:30:00.000Z","path":"2019/06/10/Django中如何将多个app放到同个文件夹apps/","text":"使用pytcharm新建apps文件夹，将之前的app目录全部拖入apps文件夹中，这时，如果我们import其他文件，pycharm就会用红色下划波浪线提示报错 from message import views我们可以通过右键文件夹——&gt;Mark Directory as——&gt;Sources Root，这样pycharm就知道可以去标记的文件夹找我们要import的模块，就不会报错了。 但我们在终端运行python manage.py runserver 8080时,仍然会报模块不存在的错误 ImportError: No module named message这是因为在pycharm标记Sources Root，但python解释器还是不知道源码路径，此时要在settings中设置app的路径： BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) #在后面添加： sys.path.insert(0,os.path.join(BASE_DIR,&apos;apps&apos;))注意：此时的from message import views必须写在设置路径语句之后。因此在慕课网教程《Python2.7到3.6完美升级强力django+杀手级xadmin》中，在settings.py中设置了app的路径之后，将from message import views写在了manage.py中时用cmd运行仍然会报错。因为manage.py这个文件是在settings.py之前执行的，也就是settings中设置的app路径还没生效。 还有记得要注册app哦:)","tags":[]},{"title":"Django中Ajax的使用","date":"2018-11-19T11:38:23.000Z","path":"2018/11/19/Django中Ajax的使用/","text":"","tags":[]},{"title":"Django中JSON的使用","date":"2018-05-24T02:14:13.000Z","path":"2018/05/24/Django中JSON的使用/","text":"一、后端向前端传JSON数据使用python的json.dumps方法+js的JSON.parse方法进行前后端json数据的传递 1、后端views.py中： def login(request): Users = models.User.objects.all() username = [] for i in Users: username.append(i.username) return render(request, &quot;login.html&quot;,{&apos;username&apos;: json.dumps(username)})&emsp;&emsp;其中 username是我User表中的一个字段，json.dumps()是python中json库的一个函数，将python对象编码成json字符串。python的json库还有一个函数是json.loads()，将已编码的json字符串解码为python对象，在下面也会介绍。 &emsp;&emsp;然后，通过render将json格式的username传到前端。 2、前端html中： var usernames = &quot;{{ username }}&quot;; var usernames_r = usernames.replace(/\\&amp;quot;/g, &apos;\\&quot;&apos;); var usernames_r_p = JSON.parse(usernames_r);&emsp;&emsp;js中对json的处理也有两个函数。JSON.parse() 方法用于将一个 JSON 字符串转换为对象。另一个方法JSON.stringify() 用于将 JavaScript 值转换为 JSON 字符串。 &emsp;&emsp;最终前端得到的usernames_r_p是个列表(原谅我取的变量名)，然后前端js就能使用列表中的数据啦！我们可以alert一下，看看usernames_r_p输出的是什么。 json可以转化的类型很多，这边只举了个list的例子，其他类型的还有(自己尝试)： 二、前端向后端传JSON数据js的JSON.stringify()方法+python的json.loads()方法。实例： 1、前端html中： &lt;script&gt; function sub() { var a = document.getElementById(&quot;aa&quot;).value; var b = document.getElementById(&quot;bb&quot;).value; var str = {&quot;a&quot;: a, &quot;b&quot;: b}; var str_json = JSON.stringify(str); document.getElementById(&quot;cc&quot;).value = str_json; return true; } &lt;/script&gt; &lt;input type=&quot;text&quot; id=&quot;aa&quot;/&gt; &lt;input type=&quot;text&quot; id=&quot;bb&quot;/&gt; &lt;form method=&quot;POST&quot; οnsubmit=&quot;return sub()&quot;&gt; {% csrf_token %} &lt;input type=&quot;hidden&quot; name=&quot;data&quot; id=&quot;cc&quot;/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/form&gt;2、后端views.py中： def login(request): if request.method == &apos;POST&apos;: print(request.POST[&apos;data&apos;]) result = json.loads(request.POST[&apos;data&apos;]) print(result[&apos;a&apos;])","tags":[]},{"title":"pycharm常用快捷键","date":"2018-04-10T11:17:21.000Z","path":"2018/04/10/pycharm常用快捷键/","text":"1.Pycharm中快捷键大全，遇到一个更新一个 撤销与反撤销：Ctrl + z，Ctrl + Shift + z 缩进、不缩进：Tab、Shift + tab 运行：Alt + Shift + F10 查看参数信息：Ctrl + p 快速跳转到函数定义：Ctrl + click/b 快速查看文档：Ctrl + q 删除当前光标位置前的单词：Ctrl + backspace（退格键） 展开/折叠代码块：Ctrl+Shift++/- 弹出最近编辑文件：Ctrl + E 重命名：Shift + F6 2.光标跳转 第一行：Ctrl + Home 最后一行：Ctrl+End 行首：Home 行尾：End 下一段开头：Alt +↑ 下一段开头： Alt +↓ 退回当前单词开头：Ctrl +← 退回当前单词末尾：Ctrl + → 当光标在代码中间，如何回车到下一行：Shift + 回车 当一行代码太长时，我们如何切换到下一行，但是光标不变：Ctrl + 回车 跳转到第几行：Ctrl + G 跳转到最近编辑的代码位置：Ctrl + Shift + Backspace 跳到申明（如跳转到当前函数声明的地方）：Ctrl + B 或 Ctrl + Click 与上面相反，跳到执行位置：Ctrl + Alt + B 跳转到上一个或者下一个方法：Alt + Up/Down 跳到代码块的结束或开始：Ctrl + ] / [ 跳转到上一个或下一个高亮错误地方：F2 / Shift + F2 3.代码选中 Shift + 光标跳转 4.删除 删除到字符结束：Ctrl +Delete 删除到字符开始：Ctrl + Backspace 删除选定行：Ctrl + Y 删除本行末尾换行符：Ctrl + shift + J 5.注释 行注释：Ctrl + /（取消行注释） 块注释：Ctrl+shift+/ 6.查找和替换 查找：Ctrl + F 替换：Ctrl + R 下一个：F3 前一个：Shift + F3 7.复制 复制当前行或选定块：Ctrl + D","tags":[]}]